## https://docs.docker.com/compose/compose-file
version: '3.8' ## @ Docker Engine 19.03.0+

x-logopts: ## https://docs.docker.com/compose/compose-file/compose-file-v3/#extension-fields 
    &common-logopts ## https://docs.docker.com/compose/compose-file/compose-file-v3/#logging 
    options:
        max-size: '12m'
        max-file: '5'
    driver: json-file

# volumes:  
#     pxy_cache:

networks:
    web1:
        driver: overlay  
        # driver_opts:
        #     ## Encrypt the data plane (taxes data rate)
        #     encrypted: ""
        external: true
    pvt1:
        driver: overlay
        external: true

configs:
    ## To update source(s) sans stack cycling (docker stack ... rm/deploy), 
    ## modify source name(s) here and at their service(s).
    ngx_conf:
        external: true
    ngx_conf_d:
        external: true
    dhparam.pem:
        #file: ${PATH_ABS_HOST_ASSETS}/keys/tls/acme.sh/dhparam.rsa.pem
        external: true
#     rds_config_v0_0_1:
#         file: ${PATH_ABS_HOST_ASSETS}/conf/redis-v0.0.1.conf
#     dbp_config_v0_0_1:
#         file: ${PATH_ABS_HOST_ASSETS}/conf/postgres-v0.0.1.conf
#         ## ===================================================
#         ##  REQUIREs: `docker config create ...`
#         ## ===================================================

secrets:
    ## To update source(s) sans stack cycling (docker stack ... rm/deploy), 
    ## modify source name(s) here and at their service(s).
    pg_pw_app_user:
        external: true
    site.key:
        #file: ${PATH_ABS_HOST_ASSETS}/keys/tls/acme.sh/acme.out/${DOMAIN}_ecc/${DOMAIN}.key
        external: true
    site.crt:
        #file: ${PATH_ABS_HOST_ASSETS}/keys/tls/acme.sh/acme.out/${DOMAIN}_ecc/${DOMAIN}.cer
        external: true
    site.fullchain.crt:
        #file: ${PATH_ABS_HOST_ASSETS}/keys/tls/acme.sh/acme.out/${DOMAIN}_ecc/fullchain.cer
        external: true
    private.pem:
        #file: ${PATH_ABS_HOST_ASSETS}/keys/private.pem
        external: true

#     redis_pw:
#         external: true
#         ## ===================================================
#         ##  REQUIREs: `docker secret create ...`
#         ##  See 'secrets.rds.sh' and 'rds.env' @ PRJ/.env/
#         ## ===================================================

x-svc: &common-svc
    # user: "1000"
    # user: "${CTNR_USER}:${CTNR_GROUP}"
    volumes:
        - ${PATH_ABS_VM_ASSETS}:/app/assets
        ## For Nginx only; static err page in case of upstream fail (502, 504).
        #- ${PATH_ABS_VM_ASSETS}/html/50x:/usr/share/nginx/html
    dns: 
        ## DNS servers required by AOA's SMTP @ Reverse DNS Lookup (rDNS)
        ## https://docs.docker.com/config/containers/container-networking/#dns-services
        ## Google Public DNS
        # - 8.8.8.8
        # - 8.8.4.4
        ## OpenDNS
        - 208.67.222.222
        - 208.67.220.220
        ## Cloudflare
        # - 1.1.1.1
        # - 1.0.0.1
    networks:
        - pvt1
    secrets:
        - source: private.pem
          target: private.pem
          uid: "${CTNR_USER}"
          gid: "${CTNR_GROUP}"
          mode: 0440
        # - source: pg_pw_app_user
        #   target: pg_pw_app_user
        #   uid: "${CTNR_USER}"
        #   gid: "${CTNR_GROUP}"
        #   mode: 0440
          ##... Sans uid:gid FAILs @ mode 0440; requires mode 0444 (world readable).
    environment:
        ## Override .env param(s)
        - APP_AUTH_PRIVATE_KEY_FILE=/run/secrets/private.pem
        #- APP_DB_PASSWORD=/run/secrets/pg_pw_app_user
        ## ... Golang reads: run***
        #- APP_DB_PASSWORD_FILE=/run/secrets/pg_pw_app_user
        ## ... Golang reads: 111*** (Makefile.settings)
        ## ... So, must handle @ Golang code; See test @ PWA : /ops/env
        #- FOO=/run/secrets/private.pem
        #- FOO_FILE=/run/secrets/private.pem
        #- APP_EMAILER_SMTP
    logging: *common-logopts

services:

    rpx: ## RPX service : Nginx : Reverse Proxy 
        ## https://hub.docker.com/_/nginx/ | https://hub.docker.com/r/nginxinc/nginx-unprivileged
        ## SSL Termination  https://docs.nginx.com/nginx/admin-guide/security-controls/terminating-ssl-tcp/
        ## Reload: make reload
        image: ${NGINX_IMAGE}
        
        ## TODO: Fix so needn't run as root ...
        #user: "101:101"
        ##... See Nginx @ Docker Hub : 'Running nginx as a non-root user'
        #user: "${CTNR_USER}:${CTNR_GROUP}"
        ##... don't care at rpx service per se, but mismatch btwn CTNR_USER, nginx user, and bind mount 

        #tty: true ## REGARDLESS: ERR: "the input device is not a tty"

        volumes:
            # - ${PATH_ABS_VM_ASSETS}/conf/nginx-global-v0.0.1.conf:/etc/nginx/nginx.conf
            # - ${PATH_ABS_VM_ASSETS}/conf/nginx.conf:/etc/nginx/conf.d/default.conf
            - ${PATH_ABS_VM_ASSETS}/html/50x:/usr/share/nginx/html
        networks:
            web1:
            pvt1:
        ports:
            #- 80:${PORT_RPX}
            #- 443:443
            ## Host mode for accurate Client IP (deploy limit : one replica per node).
            - target: ${PORT_RPX}
              published: 80
              protocol: tcp
              mode: host
            - target: 443
              published: 443
              protocol: tcp
              mode: host
        # healthcheck: ## https://docs.docker.com/compose/compose-file/compose-file-v3/#healthcheck 
        #     # test: ["CMD", "service", "nginx", "status"]
        #     test: ["CMD", "nginx", "-t"]
        #     # test: ["NONE"] 
        #     interval: 5s
        #     timeout: 2s
        #     retries: 3
        #     start_period: 10s
        ##... APPEARS TO CAUSE FAILURE
        configs:
            - source: ngx_conf
              target: /etc/nginx/nginx.conf
              uid: '101'
              gid: '101'
              mode: 0440
            - source: ngx_conf_d
              target: /etc/nginx/conf.d/default.conf
              uid: '101'
              gid: '101'
              mode: 0440
            ## UNUSED @ ECC certs
            - source: dhparam.pem
              target: /dhparam.pem
              uid: '101'
              gid: '101'
              mode: 0440
        secrets:
            - source: site.key
              target: site.key
              uid: "101"
              gid: "101"
              mode: 0440
            - source: site.crt
              target: site.crt
              uid: "101"
              gid: "101"
              mode: 0440
            - source: site.fullchain.crt
              target: site.fullchain.crt
              uid: "101"
              gid: "101"
              mode: 0440
        deploy:
            ## HA works : load balancing (sort of)
            replicas: ${REPLICAS_RPX:-1}
            restart_policy:
                ## any|on-failure|none
                condition: any
            placement:
                constraints: 
                   - node.labels.dmz == true
        depends_on:
            - aoa
            - api
            - pwa
            # - tor
        logging: *common-logopts

    ## Healthcheck for app services (exit 0|1) is handled natively;
    ## per service shutdown, regardless. See main.go .
    ## Such accomodates images built of sans.static.dockerfile, which have no shell.

    aoa: ## AOA service : Auth/OAuth2
        image: ${HUB}/${PRJ}.aoa-${ARCH} # :${VER_AOA}
        user: "${CTNR_USER}:${CTNR_GROUP}"
        <<: *common-svc
        ports: ## If no ports declaration, then liveness unable to detect IP
            # - ${PORT_AOA}:${PORT_AOA} ## leave SVC ports available for `make gorunSVC`
            - ${DBUG_AOA}:${DBUG_AOA} 

        env_file:
            - ${PATH_ABS_HOST_ASSETS}/.env/app.env
            - ${PATH_ABS_HOST_ASSETS}/.env/${APP_SERVICE_MODE}/aoa.env
            - ${PATH_ABS_HOST_ASSETS}/.env/pgha.env
        deploy:
            replicas: ${REPLICAS_AOA:-1}
            restart_policy:
                ## any|on-failure|none
                condition: any
            placement:
                constraints: 
                    ## AOA requires public node; its Email-verify endpoint (SMTP) fails @ pvt node
                    - node.labels.dmz == true
                    #- node.labels.node == 1
        # depends_on:
        #     - zpk

    api: ## API service : CRUD/Async
        image: ${HUB}/${PRJ}.api-${ARCH} # :${VER_API}
        user: "${CTNR_USER}:${CTNR_GROUP}"
        <<: *common-svc
        ports:
            # - ${PORT_API}:${PORT_API}   ## CRUD API
            - ${DBUG_API}:${DBUG_API}     ## DEBUG API
        env_file:
            - ${PATH_ABS_HOST_ASSETS}/.env/app.env
            - ${PATH_ABS_HOST_ASSETS}/.env/${APP_SERVICE_MODE}/api.env
            - ${PATH_ABS_HOST_ASSETS}/.env/pgha.env
        deploy:
            replicas: ${REPLICAS_API:-1}
            restart_policy:
                ## any|on-failure|none
                condition: any
            placement:
                constraints: 
                    - node.labels.pvt == true
                    #- node.labels.node == 1
        # depends_on:
        #     - zpk

    pwa: ## PWA service : GET Static/Dynamic Assets 
        image: ${HUB}/${PRJ}.pwa-${ARCH} # :${VER_PWA}
        user: "${CTNR_USER}:${CTNR_GROUP}"
        <<: *common-svc
        ports:
            # - ${PORT_PWA}:${PORT_PWA}
            - ${DBUG_PWA}:${DBUG_PWA} 
        env_file:
            - ${PATH_ABS_HOST_ASSETS}/.env/app.env
            - ${PATH_ABS_HOST_ASSETS}/.env/pgha.env
        deploy:
            replicas: ${REPLICAS_PWA:-1}
            restart_policy:
                condition: any
            placement:
                constraints: 
                    - node.labels.pvt == true
        # depends_on:
        #     - zpk
        # healthcheck: ## https://docs.docker.com/compose/compose-file/compose-file-v3/#healthcheck
        #     test: ["CMD", "/app/main", "http://localhost:${PORT_PWA}/liveness"] 
        #     ## ... array syntax so CMD sans shell; 
        #     ## any endpt having response body okay; see web.Healthcheck(..)
        #     interval: 5s
        #     timeout: 2s
        #     retries: 3
        #     start_period: 10s

    del: ## DEL service : Prune all swarm nodes of obsolete docker objects
         ## Bind-mount the host's docker.sock : Docker-out-of-Docker (DooD)
         ## https://hub.docker.com/r/alpinelinux/docker-cli (Alpine + docker-cli)
         ## RUN apk update && apk --no-cache add docker-cli && rm -rf /var/cache/apk/*
        image: alpinelinux/docker-cli
        <<: *common-svc
        volumes:
            - "/var/run/docker.sock:/var/run/docker.sock"
        command: ${DOCKER_PRUNE_COMMAND} 
          ##... @ multi-host swarm : docker system prune --all --force
          ##... @ docker-desktop   : docker image prune --force
        deploy:
            mode: global         ##... One per node.
            restart_policy:
                condition: none  ##... Once per deploy.
                delay: 5m
        logging: *common-logopts
